# Imports
```{python}
import pandas as pd
```

# Dataset

```{python}
yaounde = pd.read_csv("data/yaounde_data.csv")
```

```{python}
yao = yaounde[
    [
        "age",
        "sex",
        "weight_kg",
        "neighborhood",
        "occupation",
        "symptoms",
        "is_smoker",
        "is_pregnant",
        "igg_result",
        "igm_result",
    ]
]

yao.head()
```

# Introduce query

```{python}
# select all men; queries do not modify the dataframe itself

yao.query('sex == "Male"') # two different types of quotes are necessary to distinguish because they are nested
```

```{python}
# get the number of rows that fulfill the criterion

yao.query('sex == "Male"').shape[0] 
```

```{python}
# you need to create a new object/variable

yao_male = yao.query('sex == "Male"')
```

# Practice
Subset the yao data frame to respondents who were pregnant during the survey (The is_pregnant column contains “Yes”, “No” or NaN). Assign the result to a new DataFrame called yao_pregnant. Then print this new DataFrame. There should be 24 rows.

```{python}
yao_pregnant = yao.query("is_pregnant == 'Yes'")
yao_pregnant.shape[0]
```

# Relational operators

```{python}
yao.query('sex == "Female"')  # keep rows where `sex` is female
yao.query('sex != "Male"')  # keep rows where `sex` is not "Male"

yao.query("age < 6")  # keep respondents under 6
yao.query("age >= 70")  # keep respondents aged at least 70

# keep respondents whose neighbourhood is "Tsinga" or "Messa"
yao.query('neighborhood.isin(["Tsinga", "Messa"])')
```

# Practice
From yao, keep only respondents who were children (under 18). Assign the result to a new DataFrame called yao_children. There should be 291 rows.

```{python}
yao_children = yao.query("age < 18")
yao_children.shape[0]
```

With isin(), keep only respondents who live in the “Carriere” or “Ekoudou” neighborhoods. Assign the result to a new DataFrame called yao_carriere_ekoudou. There should be 426 rows.

```{python}
yao_carriere_ekoudou = yao.query("neighborhood.isin(['Carriere', 'Ekoudou'])")
yao_carriere_ekoudou.shape[0]
```

# Accessing external variable

```{python}
min_age = 25

# query using external variables, @ needed to access external
yao.query('age >= @min_age')
```

# Practice
From yao, keep respondents who are less than or equal to the variable max_age, defined below. Assign the result to a new DataFrame called yao_young. There should be 590 rows.

```{python}
max_age = 30

yao_young = yao.query('age <= @max_age')
yao_young.shape[0]
```

# Combining conditions

```{python}
# vertical bar symbols stands for "or": age less than 18 or greater than 65
yao.query("age < 18 | age > 65")
```

```{python}
# is pregnant or ex-smokers
yao.query('is_pregnant == "Yes" | is_smoker == "Ex-smoker"')
```

```{python}
# pregnant and ex-smokers
yao.query('is_pregnant == "Yes" & is_smoker == "Ex-smoker"')
```

```{python}
# to find out the values of one variable
yao.is_smoker.value_counts()
```

# Practice
Subset yao to only keep men who tested IgG positive. Assign the result to a new DataFrame called yao_igg_positive_men. There should be 148 rows after your query. Think carefully about whether to use & or |.

```{python}
yao_igg_positive_men = yao.query('sex == "Male" & igg_result == "Positive"')
yao_igg_positive_men.shape[0]
```

# Negating conditions with ~

```{python}
# return individuals who do not fulfill the condition

yao.query('~ (occupation == "Student")')
```

```{python}
# negating two conditions

yao.query("~ (age < 18 | weight_kg < 30)")

# also doable this way

yao.query("age >= 18 & weight_kg >= 30")
```

# Practice
We want to avoid giving a drug to older individuals and smokers. From yao, drop respondents that are either above 50 or who are smokers. Use ~ to negate the conditions. Assign the result to a new DataFrame called yao_dropped. Your output should have 810 rows.

```{python}
yao_dropped = yao.query("~(age > 50 | is_smoker == 'Smoker')")
yao_dropped.shape[0]
```

# NaN values
NaN indicates missing values, not a value

```{python}
yao.query("is_pregnant == NaN")  # does not work
```

```{python}
yao.query("is_pregnant.isna()")
```
```{python}
yao.query("is_pregnant.notna()")
```

# Practice
From the yao dataset, keep all the respondents who had NA records for the report of their smoking status.

```{python}
yao.query("is_smoker.isna()")
```

# Querying based on string pattern

```{python}
yao.occupation.value_counts()
```

```{python}
# values containing the string student

yao.query("occupation.str.contains('Student')")
```

```{python}
# all the individuals without the string student

yao.query("~occupation.str.contains('Student')")
```

```{python}
# either students or farmers, we don't put any spaces between the two, otherwise it looks for a space as well

yao.query("occupation.str.contains('Student|Farmer')")
```

# Practice
The symptoms column contains a list of symptoms that respondents reported.
Query yao to find respondents who reported “Cough” or “Fever” as symptoms. Your answer should have 219 rows.

```{python}
yao.query("symptoms.str.contains('Fever|Cough')")
```
