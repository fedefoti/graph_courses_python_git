# Imports

```{python}
import pandas as pd
import numpy as np
```

# Data

```{python}
yao = pd.read_csv("data/yaounde_mini.csv")
yao
```

# Introduce agg method

```{python}
# classic
yao[["age"]].mean()
```

```{python}
yao.agg(mean_age=('age', 'mean')) # tuple
```

Syntax:
dg.agg(summary_name=("column to summarize", "summary function"))
More complicated but more powerful as we can calculate more thing in once.

```{python}
yao.agg(mean_age=("age", "mean"), median_age=("age", "median"))
```

# Practice Q:

```{python}
yao.agg(mean_weight=("weight_kg", "mean"), median_weight=("weight_kg", "median"))
```

# Introduce groupby

```{python}
yao.groupby("sex")
```

```{python}
yao.groupby("sex").agg(mean_age=("age", "mean"), median_age=("age", "median"))
```

```{python}
yao.groupby("sex").agg(mean_age=("age", "mean"), median_age=("age", "median")).reset_index()
```

```{python}
(
    yao.groupby("sex")
    .agg(mean_age=("age", "mean"), median_age=("age", "median"))
    .reset_index()
)
```

Max & min weight + num of inds per neighborhood

```{python}
(
    yao.groupby("neighborhood")
    .agg(
        max_weight=("weight_kg", "max"),
        min_weight=("weight_kg", "min"),
        count=("weight_kg", "size"),  # the size function counts rows per group
    )
    .reset_index()
) 
```

# Practice Q

```{python}
(
    yao.groupby("sex")
    .agg(
        max_height=("height_cm", "max"),
        min_height=("height_cm", "min"),
        count=("height_cm", "size")
    )
    .reset_index()
)
```

# Nested grouping

```{python}
(
    yao
    .groupby(['sex', 'neighborhood'])
    .agg(mean_age=('age', 'mean'))
    .reset_index()
)
```

# Practice Q

```{python}
(
    yao
    .groupby(['age_category_3', 'sex'])
    .agg(max_height=("height_cm", "max"),
        min_height=("height_cm", "min")
    )
    .reset_index()
)
```

# NaN values in agg

```{python}
(
    yao.groupby("is_smoker")
    .agg(weight_mean=("weight_kg", "mean"))
    .reset_index()
)
```

```{python}
(
    yao.groupby("is_smoker", dropna=False)
    .agg(weight_mean=("weight_kg", "mean"))
    .reset_index()
)
```

```{python}
(
    yao.groupby("is_smoker", dropna=False)
    .agg(weight_mean=("weight_kg", "mean"), 
         count=("weight_kg", "size"))
    .reset_index()
)
```

# Practice Q:

```{python}
(
    yao.groupby("is_pregnant", dropna=False)
    .agg(weight_mean=("weight_kg", "mean"), 
         count=("weight_kg", "size"))
    .reset_index()
)
```

# Customs sats with lambda functions

```{python}
def range_func(x):
    return max(x) - min(x)

print(range_func([1, 2, 3, 4]))  # Output: 3
```

Using a lambda

```{python}
range_func = lambda x: max(x) - min(x)
print(range_func([1, 2, 3, 4]))  # Output: 3
```

```{python}
(
    yao.groupby("neighborhood")
    .agg(weight_range=("weight_kg", range_func))
    .reset_index()
)
```

Coefficient of variation: (std/mean) * 100

```{python}
(
    yao.groupby("neighborhood")
    .agg(weight_cv=("weight_kg", lambda x: (np.std(x) / np.mean(x)) * 100))
    .reset_index()
)
```

#Â Practice Q:

```{python}
(
    yao.groupby("neighborhood")
    .agg(weight_cv=("weight_kg", lambda x: x.quantile(0.75)-x.quantile(0.25))
    )
    .reset_index()
)
```

