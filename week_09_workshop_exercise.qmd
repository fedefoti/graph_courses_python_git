---
title: "Workshop Exercise: Joining and Reshaping Data"
author: "Federica"
---

# 1. Introduction

In this workshop, you'll learn how to clean and analyze HIV and AIDS data across different countries and years. We will start with raw datasets containing estimates of new and total HIV cases per country-year. The goal is to clean and merge these datasets with population data.

# 2. Load Libraries

```{python}
# Load libraries
import pandas as pd
import country_converter as coco
import plotly.express as px
import numpy as np
```

# 3. Data Import

Download the datasets from the relevant link on the course page and unzip them if necessary.

First, we import two raw datasets, each containing estimates per country-year. These data were accessed from the Gapminder foundation, at [www.gapminder.org/data](https://www.gapminder.org/data).

1. **People living with HIV:** This dataset contains the total number of people currently infected with HIV (*data/hiv_prevalence.csv*).

2. **New HIV infections:** This dataset provides the total number of people newly infected with HIV during a given year (*data/hiv_incidence.csv*).

Load the datasets into Python using `pd.read_csv()` then explore them to understand their structure.

```{python}
# Load raw data from specified paths
total_hiv_raw = pd.read_csv("data/hiv_prevalence.csv")
new_hiv_raw = pd.read_csv("data/hiv_incidence.csv")
```

Now, we import data on population estimates per country per year from the World Bank:

```{python}
# Load population data
population = pd.read_csv("data/population_estimates_world_bank.csv")
```

# 4. Reshape Data

Now that we have imported the data it's time to reshape it.

The datasets are currently in wide format, with each year as a separate column, something like this:

| country     | 1990  | 1991  | 1992  | 1993  | 1994  |
|-------------|-------|-------|-------|-------|-------|
| Afghanistan | 600   | 600   | 1000  | 1100  | 1200  |
| Angola      | 33000 | 39000 | 46000 | 54000 | 62000 |
| Argentina   | 27000 | 31000 | 35000 | 39000 | 43000 |
| Armenia     | 350   | 600   | 600   | 600   | 1000  |
| Australia   | 12000 | 12000 | 12000 | 11000 | 11000 |
| Austria     | 600   | 600   | 1000  | 1300  | 1500  |

We need to convert this to long format, where each row represents a single year-country combination.

For example:

| country     | year | cases |
|-------------|------|-------|
| Afghanistan | 1990 | 600   |
| Afghanistan | 1991 | 600   |
| Afghanistan | 1992 | 1000  |
| Afghanistan | 1993 | 1100  |
| Afghanistan | 1994 | 1200  |

## 4.1 Instructions for Reshaping `new_hiv_raw` Data

Reshape the `new_hiv_raw` dataset by converting the columns that represent different years into a new column called `year`, and place the corresponding values into a new column called `new_cases`.

Hints:

1. Use `melt()` on `new_hiv_raw`.
2. Exclude the `country` and `country_code` columns from being melted by specifying `id_vars=['country', 'country_code']`.
3. Set the names of the new columns inside `melt()` using:
    - `var_name='year'` to label the column that will store the years.
    - `value_name='new_cases'` to store the values representing new HIV cases under the `new_cases` column.

```{python}
# Reshape new_hiv_raw to long format
#new_hiv_raw
new_hiv_long = pd.melt(new_hiv_raw, id_vars=['country', 'country_code'], var_name="year", value_name="new_cases")
new_hiv_long
```

---

## 4.2 Instructions for Reshaping `total_hiv_raw` Data

In a similar manner, reshape the `total_hiv_raw` dataset to a long format. Convert the year columns into a new column called `year` and the counts into `total_cases`.

```{python}
# Reshape total_hiv_raw to long format
total_hiv_long = pd.melt(total_hiv_raw, id_vars = ['country', 'country_code'],var_name= "year", value_name= "total_cases" )
total_hiv_long
```

**CHECKPOINT:**

After performing these steps, make sure that you have two reshaped datasets:

- `new_hiv_long` with **4 columns**: `country`, `country_code`, `year`, and `new_cases`.
- `total_hiv_long` with **4 columns**: `country`, `country_code`, `year`, and `total_cases`.

```{python}
new_hiv_long
total_hiv_long
```

# 5. Joining the HIV Datasets

Now that both datasets are in long format, we can join them.

Note that you need to use the `country`, `country_code`, and `year` columns as the keys (`on=['country', 'country_code', 'year']`).

Use `pd.merge()` with `how='outer'` so that we can keep as much information as possible.

```{python}
# Join the two datasets
hiv_data_combined = pd.merge(
    new_hiv_long, 
    total_hiv_long, 
    on =['country', 'country_code', 'year'], 
    how = "outer"
    )
hiv_data_combined
```

**CHECKPOINT:** The combined dataset should have columns for `country`, `country_code`, `year`, `total_cases`, and `new_cases`. There may some missing values; that is okay.

# 6. Add Population Data

The `population` dataset contains information on population per year from 2000 to 2017.

```{python}
population.head()
```

Note that we are interested in the total population of each country, which is labelled `SP.POP.TOTL` in the dataset.

Additionally, note that the `country` column doesn't have full country names, but the 3-letter country codes.

This will make it easier to join with our HIV dataset, since country codes are consistent across datasets (unlike full country names).

## 6.1 Filter and Prepare Population Data

Next, complete the following transformations on the `population` dataset:

-   Query the data to just the `SP.POP.TOTL` indicator
-   Melt the data to a long format.
-   Rename the "country" column to "country_code" so that we can join it properly later on.
-   Drop the `indicator` column.

Store your final result as `population_long`.

```{python}
# querying to have just the total population, saving it as an intermediate dataset
pop_total = population.query('indicator == "SP.POP.TOTL"')

# dropping the indicator column as we don't need it
pop_total = pop_total.drop(columns = ["indicator"])

#checking
pop_total

# using melt to have the data in long format
population_long = pd.melt(
    pop_total, 
    id_vars = "country", 
    var_name = "year", 
    value_name = "population"
)

# checking
population_long

#rename "country" to "country_code"
population_long = population_long.rename(columns = {"country" : "country_code"})

# checking
population_long
```

**CHECKPOINT:**

After performing these steps, make sure that you have a dataset named `population_long` with **3 columns**: `country_code`, `year`, and `population`.

## 6.2 Join Population Data with HIV Data

Use `pd.merge()` to add the population information to your HIV data combined dataset (the HIV data should be the left or primary dataset). You should use both "country_code" and "year" as keys.

```{python}
# merge population data with HIV data
hiv_combined_pop = pd.merge(
    hiv_data_combined, 
    population_long, 
    on =['country_code', 'year'], 
    how = "outer"
    )
hiv_combined_pop
```

**CHECKPOINT:** Verify that `hiv_data_combined_pop` now contains a `population` column.

## 6.3 Calculate Incidence Rate and Prevalence Rate

Lastly, calculate the incidence rate and prevalence rate per 100,000 people:

- **Incidence Rate** = New Cases / Population * 100000
- **Prevalence Rate** = Total Cases / Population * 100000

```{python}
# calculating incidence rate
hiv_combined_pop["incidence_rate"] = (hiv_combined_pop["new_cases"]/hiv_combined_pop["population"]) * 100000
hiv_combined_pop

# calculating prevalence data
hiv_combined_pop["prevalence_rate"] = (hiv_combined_pop["total_cases"]/hiv_combined_pop["population"]) * 100000
hiv_combined_pop
```

# 7. Plot Incidence Rates

Now, you'll select 3 countries of your choice and plot their incidence rate over time.

- Query the data to narrow down the countries. 
- Convert the `year` column to a `numeric` type with `astype(int)`.

Store the result as `hiv_data_mini`. Note that some countries have many years with missing data, especially for `new_cases`.

```{python}
# querying the data to narrow down to three countries using the country code
hiv_data_mini = hiv_combined_pop.query("country_code == ['BWA', 'MWI', 'ZAF']")

# converting year column into numeric
hiv_data_mini["year"] = hiv_data_mini["year"].astype(int)

# checking
hiv_data_mini.dtypes
```

Comment: I picked the countries using the country code as in one dataset the was no country name, only the country code. Since the country code was the same in both datasets I preferred this option, it felt "safer".

Now plot incidence rates over time using a line graph.

```{python}
# plotting incidence rate over time
fig_incidence = px.line(hiv_data_mini, x ="year", y = "incidence_rate", color = "country_code", title = "Incidence rate over time")
fig_incidence.update_layout(
    xaxis_title = "Incidence rate",
    yaxis_title = "Year",
    legend_title = "Country"
)
fig_incidence.show()
```

Comment: I picked Botwsana (BWA), Malawi (MWI) and South Africa (ZAF). I knew that Africa is the continent which has been struggling the most with HIV and I quickly searched on Google to find three countries with high prevalence, as I found it more interesting. In all three countries the incidence rate has been going down since the 2000s, but in this case we're missing quite some data points after (or right before) 2010. Big efforts have been made to reduce incidence rates, so it makes completely sense.

# 8. Plot Prevalence Rates

Plot their prevalence rates over time, using a line graph.

```{python}
# plotting prevalence rate over time
fig_prevalence = px.line(hiv_data_mini, x ="year", y = "prevalence_rate", color = "country_code", title = "Prevalence rate over time")
fig_prevalence.update_layout(
    xaxis_title = "Prevalence rate",
    yaxis_title = "Year",
    legend_title = "Country"
)
fig_prevalence.show()
```

Comment: Here the curves show different trends. 
In Botwsana we can say that prevalence has been going down a tiny bit but it's still by far the highest among the three countries. Even when the incidence goes down, if there are many people suffering from HIV the prevalence will still be high and will decrease slowly.
In South Africa the course goes up in the early 2000s and then stays stable. My guess, maybe HIV-positive people are living longer because of treatment? 
In Malawi, on the other hand, the prevalence has been going down. Since the incidence has also been going down it could make sense, but it could also be that people are still dying very fast but new cases are appearing more slowly, so the prevalence goes down.
In general we of course don't have a complete picture. We can compare the data nicely because we're considering rate and not absolute numbers tho. I think the three countries offer a good example in terms of prevalence rates, because they present three different situations in prevalence but a similar picture in incidence. 

# 9. Optional Challenge

For this challenge, you should:

1. **Add Regional Information:** Use the `country_converter` package to get regional (continent) information for each country.
2. **Identify Highest Prevalence Rates per Continent:** Find the countries with the highest prevalence rate in 2011 for each continent.
3. **Create a Bar Chart:** Make a bar chart comparing the 2011 prevalence rates of these countries.

```{python}
# adding continent information

# trying out country converter with my three countries first
coco.convert(names = ["BWA", "MWI", "ZAF"], to = "continent")

# setting up a function to add the continent information
def find_continent(country):
    continent = coco.convert(names = country, to = "continent")
    return continent

# vectorize the function
find_continent_vec = np.vectorize(find_continent)

# applying the vectorized function to have the continent based on the country code
hiv_combined_pop["continent"] = find_continent_vec(hiv_combined_pop["country_code"])

# checking: 900 rows were not assigned
hiv_combined_pop["continent"].value_counts()
```

```{python}
# finding the data from 2011 and saving it as new dataset
hiv_combined_2011 = hiv_combined_pop.query("year == '2011'")

```

```{python}
# finding the highest prevalence rates by continent
max_rates = hiv_combined_2011.groupby('continent')['prevalence_rate'].max().reset_index()
max_rates.rename(columns={'prevalence_rate': 'max_prevalence_rate'}, inplace=True)

# merge back to find the countries with those max rates
result = pd.merge(hiv_combined_2011, max_rates, how ='inner',
                  left_on=['continent', 'prevalence_rate'],
                  right_on=['continent', 'max_prevalence_rate'])

# select only relevant columns for display
result = result[['continent', 'country_code', 'prevalence_rate']]

# dropping all the countries with at least one missing value, including those where it was not possible to assign a continent
result = result.dropna()
```

Comment: I wished there was a more elegant strategy, but I could not find any.

```{python}
# plotting the highest prevalence for each continent
fig = px.bar(result, 
y = "prevalence_rate",
x = "continent", 
color = "continent", 
title = " Highest prevalence rate by continent"
)

fig.update_layout(
    xaxis_title = "Continent",
    yaxis_title = "Prevalence rate",
    legend_title = "Continent"
)
fig.show()
```

```{python}
result
```

Comment: I plotted the data coming from the country with the highest prevalence for each continent in 2011. Not surprisingly, the highest prevalence belongs to an African country. Second it's an American one, with a prevalence around 10 times lower. Europe and Asia follow with similar values, Oceania is last. 
The codes correspond to The Bahamas (America), Estonia (Europe), Papua New Guinea (Oceania), Eswatini (Africa) and Thailand (Asia). 
I think it would have been interesting to look at the mean prevalence per continent knowing the number of countries per continent in the dataset, as we don't one if any of the values plotted are still in range with the rest of the continent or are complete outlier, maybe twice or three times higher than the second highest value. Looking only at prevalence also does not provide us a complete picture. However, it's still interesting.