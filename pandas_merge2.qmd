# Packages

```{python}
import pandas as pd
import country_converter as cc
```

# Data

```{python}
oil_consumption = pd.read_csv("data/oil_consumption.csv")

tidyr_population = pd.read_csv("data/tidyr_population.csv")

country_regions = pd.read_csv("data/country_continents.csv")

oil_2012 = (
    oil_consumption[oil_consumption["year"] == 2012].copy().drop(columns=["year"])
)

# people data
people = pd.DataFrame({"name": ["Alice", "Bob", "Charlie"], "age": [25, 32, 45]})

test_info_many = pd.DataFrame(
    {
        "name": ["Alice", "Alice", "Bob", "Bob", "Charlie", "Charlie"],
        "test_date": [
            "2023-06-05",
            "2023-06-10",
            "2023-08-10",
            "2023-05-02",
            "2023-05-12",
            "2023-05-15",
        ],
        "result": [
            "Negative",
            "Positive",
            "Positive",
            "Negative",
            "Negative",
            "Negative",
        ],
    }
)

farm_info = pd.DataFrame(
    {
        "farm_id": [1, 2, 3],
        "farm_name": ["Green Acres", "Harvest Hill", "Golden Fields"],
        "location": ["County A", "County B", "County A"],
    }
)

crop_yields = pd.DataFrame(
    {
        "farm_id": [1, 1, 2, 3, 3],
        "crop": ["Wheat", "Corn", "Soybeans", "Wheat", "Barley"],
        "yield_tons": [50, 60, 45, 55, 30],
    }
)

traffic_flow = pd.DataFrame(
    {
        "street_name": [
            "Main St",
            "Main St",
            "Broadway",
            "Broadway",
            "Elm St",
            "Elm St",
        ],
        "time_of_day": ["9am", "2pm", "9am", "2pm", "9am", "2pm"],
        "vehicle_count": [1200, 900, 1500, 1100, 700, 600],
    }
)

pollution_levels = pd.DataFrame(
    {
        "street_name": [
            "Main St",
            "Main St",
            "Broadway",
            "Broadway",
            "Elm St",
            "Elm St",
        ],
        "time_of_day": ["9am", "2pm", "9am", "2pm", "9am", "2pm"],
        "pm_2_5_level": [35.5, 42.1, 40.3, 48.2, 25.7, 30.9],
    }
)

test_info_diff = pd.DataFrame(
    {
        "name": ["alice", "Bob", "Charlie "],
        "test_date": ["2023-06-05", "2023-08-10", "2023-05-02"],
        "result": ["Negative", "Positive", "Negative"],
    }
)

asia_countries = pd.DataFrame(
    {
        "Country": ["India", "Indonesia", "Philippines"],
        "Capital": ["New Delhi", "Jakarta", "Manila"],
    }
)

asia_population = pd.DataFrame(
    {
        "Country": ["India", "indonesia", "Philipines"],
        "Population": [1393000000, 273500000, 113000000],
        "Life_Expectancy": [69.7, 71.7, 72.7],
    }
)

```

# One to many joins

```{python}
people
```

```{python}
test_info_many
```

```{python}
pd.merge(people, test_info_many, on="name", how="left")
```

Age column has been duplicated

# Practice Q:
If you use a merge() to join these datasets, how many rows will be in the final dataframe? Try to figure it out and then perform the join to see if you were right.
Five
```{python}
farm_info
```

```{python}
crop_yields
```

```{python}
pd.merge(farm_info, crop_yields, how = "left")
```

# Multiple key columns 

```{python}
traffic_flow
```

```{python}
pollution_levels
```

```{python}
pd.merge(traffic_flow, pollution_levels, on="street_name", how="left") # duplicates rows
```

```{python}
pd.merge(traffic_flow, pollution_levels, on=["street_name", "time_of_day"]) # supplying a list to correctly match everything
```

# Practice Q:
We have two datasets containing information about countries:
oil_consumption: Contains yearly oil consumption in tonnes
tidyr_population: Contains yearly population data

1. Join these datasets using merge() with a left join. Since we want to match both country AND year, you’ll need to join on multiple columns. (You may notice that not all rows are matched. You can ignore this for now.)

2. After joining, create a new column called consumption_per_capita that calculates the yearly oil consumption per person (in tonnes).

3. Which country had the highest per capita oil consumption in 1995? Singapore

```{python}
# View the datasets
oil_consumption.sort_values(by=["country", "year"])
```

```{python}
tidyr_population.sort_values(by=["country", "year"])
```

```{python}
# 1.
merged_data = pd.merge(oil_consumption, tidyr_population, on=["country", "year"])

# 2.
merged_data["consumption_per_capita"] = merged_data["oil_consump"]/merged_data["population"]

# 3.
merged_data["consumption_per_capita"].sort_values(ascending = False)
merged_data["country"][1146]
```

# Key mistmatches

```{python}
people
```

```{python}
test_info_diff
```

```{python}
people.merge(test_info_diff, on='name', how='left')
```

```{python}
pd.merge(people, test_info_diff, on="name", how="inner")
```

```{python}
test_info_diff['name'] = test_info_diff['name'].str.title()
test_info_diff
```

```{python}
people.merge(test_info_diff, on='name', how='inner')
```

```{python}
test_info_diff['name'].unique()
```

```{python}
test_info_diff['name'] = test_info_diff['name'].str.strip()
test_info_diff
```

```{python}
people.merge(test_info_diff, on='name', how='inner')
```

# Practice Q:
The following two datasets contain data for India, Indonesia, and the Philippines. However, an inner join of these datasets only returns 1 row.

What are the differences between the values in the key columns that would have to be changed before joining the datasets? Pay attention to capitalization and spelling.

Now, fix the mismatched values in the Country column and try the join again.

```{python}
asia_countries
```

```{python}
asia_population
```

Differences: Indonesia is not capitalized and Philipines is spelled wrong

```{python}
asia_population['Country'] = asia_population['Country'].str.title()
asia_population
```

```{python}
asia_population = asia_population.replace({"Philipines" : "Philippines"})
```

```{python}
pd.merge(asia_countries, asia_population)
```

# Key mismatches: Oil Consumption examples

```{python}
oil_pop = pd.merge(
    oil_consumption, tidyr_population, on=["country", "year"], how="left"
).sort_values(["country", "year"])
```

```{python}
oil_countries = set(oil_consumption['country'].unique())
pop_countries = set(tidyr_population['country'].unique())
```

```{python}
missing_in_pop = oil_countries - pop_countries
missing_in_pop
```

```{python}
missing_in_oil = pop_countries - oil_countries
missing_in_oil
```

```{python}
# side note on set arithmetic
set1 = set([1, 2, 3, 4, 5])
set2 = set([2, 3, 4])
set1 - set2
```

# Merging with country codes

```{python}
cc.convert("Nigeria", to = "ISO3")
```

```{python}
oil_consumption['country_code'] = cc.convert(oil_consumption['country'], to='ISO3')
tidyr_population['country_code'] = cc.convert(tidyr_population['country'], to='ISO3')
```

```{python}
oil_pop_code = oil_consumption.merge(tidyr_population, on=['country_code', 'year'], how='left')
```

```{python}
set(oil_pop_code['country_code'].unique()) - set(tidyr_population['country_code'].unique())
```

```{python}
tidyr_population.query("country.str.contains('Taiwan')")
```

```{python}
tidyr_population.query("country.str.contains('China')")
```

# Practice Q:
Join the two datasets using the country codes as the key. Then find the countries with the highest oil consumption in each continent. As a sanity check, your answer should include the US & China.

```{python}
#oil_2012
country_regions

```

```{python}
oil_2012['country_code'] = cc.convert(oil_2012['country'], to='ISO3')
oil_2012

country_regions["country_code"] = cc.convert(country_regions["country.name.en"], to = "ISO3")


```

```{python}
pd.merge(oil_2012, country_regions, on='country_code', how='left')
```