# Imports

```{python}
import pandas as pd
import numpy as np
import vega_datasets as vd
```

# Basics of a function

```{python}
def pounds_to_kg(pounds):
    return pounds * 0.4536

print(pounds_to_kg(150))
```

```{python}
def pounds_to_kg(pounds):
    kg = pounds * 0.4536
    return kg

pounds_to_kg(pounds = 150)
# or alternitavely
pounds_to_kg(150)
```

```{python}
pounds_df = pd.DataFrame({"pounds": [150, 200, 250]})
pounds_df["kg"] = pounds_to_kg(pounds_df["pounds"])
pounds_df
```

# Practice Q

```{python}
riots_df = vd.data.la_riots()

def age_in_months(years):
    months = years * 12
    return months

riots_df["age_months"] = age_in_months(riots_df["age"])
riots_df
```

# Functions with multiple arguments

```{python}
def calc_calories(carb_grams, protein_grams, fat_grams):
    result = (carb_grams * 4) + (protein_grams * 4) + (fat_grams * 9)
    return result
```

```{python}
#does not work
#calc_calories(carb_grams = 50, protein_grams = 25)
```

```{python}
# adding default values

def calc_calories(carb_grams = 0, protein_grams = 0, fat_grams = 0):
    result = (carb_grams * 4) + (protein_grams * 4) + (fat_grams * 9)
    return result
```

```{python}
food_df = pd.DataFrame({
    'food': ['Apple', 'Avocado'],
    'carb_grams': [25, 10],
    'protein_grams': [0, 1],
    'fat_grams': [0, 14]
})
food_df['calories'] = calc_calories(food_df['carb_grams'], food_df['protein_grams'], food_df['fat_grams'])
food_df
```

# Practice Q:

```{python}
bmi_df = pd.DataFrame({
    'Weight': [70, 80, 100],  # in kg
    'Height': [1.7, 1.8, 1.2]  # in meters
})

def calculate_bmi(weight, height):
    bmi = weight/(height**2)
    return bmi

bmi_df["bmi"] = calculate_bmi(bmi_df["Weight"], bmi_df["Height"])
bmi_df
```

The third person in the dataframe with a weight of 100 kg is severly obese.

# Introduction to conditionals: if, elif, else

```{python}
def class_num(num):
    if num > 0:
        return "Positive"
    elif num < 0:
        return "Negative"
    elif num == 0:
        return "Zero"
    else:
        return "Invalid"

print(class_num(-5))
print(class_num(5))
print(class_num(0))
print(class_num(np.nan))
```

Using on a dataframe

```{python}
num_df = pd.DataFrame({'num': [10, -5, 0]})
num_df
```

```{python}
#this does not work
#class_num(num_df["num"]) 
#we are passing a series, the function is made for single numbers, because conditionals are not vectorized
```

```{python}
class_num_vec = np.vectorize(class_num)
```

```{python}
num_df["category"] = class_num_vec(num_df["num"])
```

# Grading examples
85+: "Excellent"
60-84: "Pass"
<60: "Fail"
negative or invalid: "Invalid"
```{python}
def categorize_grade(grade):
    if grade >= 85 and grade <= 100:
        return 'Excellent'
    elif grade >= 60 and grade < 85:
        return 'Pass'
    elif grade >= 0 and grade < 60:
        return 'Fail'
    else:
        return 'Invalid grade'

categorize_grade(95)
```

```{python}
categorize_grade = np.vectorize(categorize_grade)

grades_df = pd.DataFrame({'grade': [95, 82, 76, 65, 58, -5]})
grades_df['grade_cat'] = categorize_grade(grades_df['grade'])
grades_df
```

# Practice Q:
If the age is under 18, the category is ‘Minor’.
If the age is greater than or equal to 18 and less than 65, the category is ‘Adult’.
If the age is greater than or equal to 65, the category is ‘Senior’.
If the age is negative or invalid, return ‘Invalid age’.

```{python}
def categorize_age(age):
    if age < 18:
        return "Minor"
    if age >= 18 and age < 65:
        return "Adult"
    if age >= 65:
        return "Senior"
    else:
        return "Invalid age"

riots_df = vd.data.la_riots()
riots_df

categorize_age_vec = np.vectorize(categorize_age)
riots_df["age_category"] = categorize_age_vec(riots_df["age"])
riots_df
```

# Other ways to apply a similar recoding on a dataframe
- apply()
- np.select()
- np.where()
- pd.cut()